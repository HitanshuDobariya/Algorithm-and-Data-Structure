import time

class productData:
    def __init__(self, ID, Name, Price, Category):
        self.ID = int(ID)
        self.Name = Name
        self.Price = float(Price)
        self.Category = Category


def updateData(arr):
    try:
        ID = int(input("Enter the ID of the product to Update: "))
        updatedID = int(input("Enter the updated ID: "))
        updatedName = input("Enter the updated Name: ")
        updatedPrice = float(input("Enter the updated Price: "))
        updatedCategory = input("Enter the updated Category: ")
    except ValueError:
        print("Incorrect Information or type")

    for item in arr:
        if item.ID == ID:
            item.ID = updatedID
            item.Name = updatedName
            item.Price = updatedPrice
            item.Category = updatedCategory
            print("Product details updated successfully.")
            return
    print("Product not found.")


def insertData(arr):
    try:
        newID = int(input("Enter the new product ID: "))
        for item in arr:
            if item.ID == newID:
                print("ID already exists,Choose different ID")
                return
        newName = input("Enter the new product Name: ")
        newPrice = float(input("Enter the new product Price: "))
        newCategory = input("Enter the new product Category: ")
        arr.append(productData(newID, newName, newPrice, newCategory))
        print("Product added successfully.")
    except ValueError:
        print("Incorrect Information or type")


def delData(arr):
    try:
        delID = int(input("Enter ID of the product you wish to delete: "))
    except ValueError:
        print("Incorrect Information or type")

    for item in arr:
        if item.ID == delID:
            arr.remove(item)
            print("Product deleted successfully.")
            return
    print("Product not found.")


def searchData(arr):
    try:
        searchID = int(input("Enter ID of the product to search for: "))
    except ValueError:
        print("Incorrect Information or type")
        return

    print("\nSearch results:")
    print("\nID\t\t\tName\t\t\t\t Price\t\t  Category")
    for item in arr:
        if item.ID == searchID:
            print(f'{item.ID}\t{item.Name.ljust(25)}{item.Price}\t\t{item.Category}')
            return
    print("Product not found.")


def bubbleSort(arr):
    n = len(arr)
    for i in range(n - 1):
        for j in range(0, n - i - 1):
            if arr[j].Price > arr[j + 1].Price:
                arr[j], arr[j + 1] = arr[j + 1], arr[j]


def loadData():
    try:
        file = open("C:\\Users\\hitan\\Documents\\product_data.txt", "r")
        for line in file:
            formData = line.strip().split(',')
            data.append(productData(formData[0], formData[1], formData[2], formData[3]))
        file.close()
    except FileNotFoundError:
        print("File not found.")


data = []
loadData()

while True:
    print('\nOptions:')
    print('1. Insert a new product')
    print('2. Update product details')
    print('3. Delete a product')
    print('4. Search for a product')
    print('5. Sort products by price')
    print('6. Print all products')
    print('x. Exit')

    optionSelect = input('Enter your choice: ')

    if optionSelect == '1':
        insertData(data)
    elif optionSelect == '2':
        updateData(data)
    elif optionSelect == '3':
        delData(data)
    elif optionSelect == '4':
        searchData(data)
    elif optionSelect == '5':
        start_time = time.time()  # Start timing
        bubbleSort(data)
        end_time = time.time()  # End timing
        print("Products sorted by price successfully.")
        print("Time taken for sorting:", end_time - start_time)  # Display sorting time
    elif optionSelect == '6':
        print("\nID\t\t\tName\t\t\t\t Price\t\t  Category")
        for item in data:
            print(f'{item.ID}\t{item.Name.ljust(25)}{item.Price}\t\t{item.Category}')
    elif optionSelect.lower() == 'x':
        print("Exiting Program...")
        break
    else:
        print("Invalid choice. Please enter a valid option.")
